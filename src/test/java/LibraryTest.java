/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.Term;
import org.apache.lucene.search.SeqSpanQuery;
import org.apache.lucene.search.plugins.SeqSpanQueryBuilder;
import org.apache.lucene.search.plugins.SeqSpanQueryParser;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.PhraseQuery;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.elasticsearch.cluster.ClusterModule;
import org.elasticsearch.common.xcontent.NamedXContentRegistry;
import org.elasticsearch.common.xcontent.XContent;
import org.elasticsearch.common.xcontent.XContentParser;
import org.elasticsearch.common.xcontent.json.JsonXContent;
import org.elasticsearch.common.xcontent.json.JsonXContentParser;
import org.elasticsearch.index.query.QueryBuilder;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.util.stream.Stream;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test
    public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test
    public void testPhraseQuery() {

        try {


            IndexWriterConfig conf = new IndexWriterConfig(new StandardAnalyzer());

            Directory dir = FSDirectory.open(new File("/Users/zhangcheng/Downloads/idx").toPath());

            IndexWriter writer = new IndexWriter(dir, conf);

            {
                Document doc = new Document();
                doc.add(new TextField("a", "b c d", Field.Store.YES));
                writer.addDocument(doc);
            }
            {
                Document doc = new Document();
                doc.add(new TextField("a", "c d b", Field.Store.YES));
                writer.addDocument(doc);
            }
            writer.commit();

            IndexReader reader = DirectoryReader.open(writer);

            IndexSearcher searcher = new IndexSearcher(reader);
            PhraseQuery.Builder queryBuidler = new PhraseQuery.Builder();
            queryBuidler.add(new Term("a", "c"), 0);
            queryBuidler.add(new Term("a", "d"), 1);
            queryBuidler.setSlop(0);
            TopScoreDocCollector collector = TopScoreDocCollector.create(10);

            searcher.search(queryBuidler.build(), collector);
            Stream.of(collector.topDocs().scoreDocs).forEach(x -> {
                System.out.println(x.doc + " : " + x.score);
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test
    public void testSeqSpanQuery() {

        try {


            IndexWriterConfig conf = new IndexWriterConfig(new StandardAnalyzer());

            Directory dir = FSDirectory.open(new File("/Users/zhangcheng/Downloads/idx").toPath());

            IndexWriter writer = new IndexWriter(dir, conf);

            {
                Document doc = new Document();
                doc.add(new TextField("field", "b c d e f", Field.Store.YES));
                writer.addDocument(doc);
            }
            {
                Document doc = new Document();
                doc.add(new TextField("field", "x b c d x e f", Field.Store.YES));
                writer.addDocument(doc);
            }
            writer.commit();

            IndexReader reader = DirectoryReader.open(writer);

            IndexSearcher searcher = new IndexSearcher(reader);

            SeqSpanQuery ssQuery = new SeqSpanQuery("field", "b", "f", new String[] {"c", "d", "e"}, 3);

            TopScoreDocCollector collector = TopScoreDocCollector.create(10);

            searcher.search(ssQuery, collector);

            Stream.of(collector.topDocs().scoreDocs).forEach(x -> {
                System.out.println(x.doc + " : " + x.score);
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test public void testSeqSpanQueryBuilder() throws IOException {

        String json = "{\n"
            + "  \"seq_span\": {\n"
            + "    \"field\": \"content\",\n"
            + "    \"start_term\": \"a\",\n"
            + "    \"end_term\": \"g\",\n"
            + "    \"seq_term\": \"b c d e f\",\n"
            + "    \"max_span\": 8\n"
            + "  }\n"
            + "}";

        XContentParser parser = JsonXContent.jsonXContent.createParser(null, json);

        SeqSpanQueryBuilder seqSpanQueryBuilder = new SeqSpanQueryParser().fromXContent(parser);
        System.out.println(seqSpanQueryBuilder);
    }

}