/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.apache.lucene.analysis.core.KeywordAnalyzer;
import org.apache.lucene.analysis.core.WhitespaceAnalyzer;
import org.apache.lucene.analysis.standard.StandardAnalyzer;
import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.lucene.document.StringField;
import org.apache.lucene.document.TextField;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.index.IndexWriter;
import org.apache.lucene.index.IndexWriterConfig;
import org.apache.lucene.index.Term;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.PhraseQuery;
import org.apache.lucene.search.ScoreDoc;
import org.apache.lucene.search.TopDocs;
import org.apache.lucene.search.TopScoreDocCollector;
import org.apache.lucene.store.Directory;
import org.apache.lucene.store.FSDirectory;
import org.apache.lucene.store.RAMDirectory;
import org.junit.Test;

import java.io.File;
import java.lang.annotation.Documented;
import java.util.stream.Stream;

import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void testSomeLibraryMethod() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }

    @Test public void testPhraseQuery() {

        try {


            IndexWriterConfig conf = new IndexWriterConfig(new StandardAnalyzer());

            Directory dir = FSDirectory.open(new File("/Users/zhangcheng/Downloads/idx").toPath());

            IndexWriter writer = new IndexWriter(dir, conf);

            {
                Document doc = new Document();
                doc.add(new TextField("a", "b c d", Field.Store.YES));
                writer.addDocument(doc);
            }
            {
                Document doc = new Document();
                doc.add(new TextField("a", "c d b", Field.Store.YES));
                writer.addDocument(doc);
            }
            writer.commit();

            IndexReader reader = DirectoryReader.open(writer);

            IndexSearcher searcher = new IndexSearcher(reader);
            PhraseQuery.Builder queryBuidler = new PhraseQuery.Builder();
            queryBuidler.add(new Term("a", "c"), 0);
            queryBuidler.add(new Term("a", "d"), 1);
            queryBuidler.setSlop(0);
            TopScoreDocCollector collector = TopScoreDocCollector.create(10);

            searcher.search(queryBuidler.build(), collector);
            Stream.of(collector.topDocs().scoreDocs).forEach(x -> {
                System.out.println(x.doc + " : " + x.score);
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
